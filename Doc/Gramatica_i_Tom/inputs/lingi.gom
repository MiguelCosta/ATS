module parser.lingi
imports String int
abstract syntax
	Programa 	= Programa(Funcao*)
	Funcao   	= Funcao(Cabecalho, Corpo_Funcao)
	Cabecalho	= Cabecalho1(tipo:String, ID:String)
				| Cabecalho2(tipo:String, ID:String, Argumentos)
	Argumentos	= Argumentos(Declaracao)
				| Argumentos(Argumentos, Declaracao)
	Declaracoes	= Declaracao*
				| Delaracao, Declaracoes
	Declaracao	= Declaracao(tipo:String, ID:String)
				| Declaracao(tipo:String, ID:String, Expr) APAGAR 
	Corpo_Funcao= Corpo_Funcao(Statements)
				| Corpo_Funcao(Declaracoes, Statements)
	Statements	= Statements(Statement*)
	Statement	= StatementAtribuicao(Atribuicao)
				| StatementIfs(Ifs)
				| StatementWhiles(Whiles)
				| StatementFors(Fors)
				| StatementInvocacao(Invocacao)
				| StatementRetorna(Retorna)
	Atribuicao	= Atribuicao(ID:String, Expr)
	
	Whiles		= Whiles(Expr, Bloco)
	Fors		= Fors(ForExpr, Expr, Forexpr, Bloco)
	ForExpr		= ForExprExpr()
				| ForExprAtribuicao()
	ForExprExpr	= Expr()
	ForExprAtribuicao = Atribuicao()
	Invocacao	= Invocacao(Args)
	Retorna		= Retorna(Expr)
	Bloco		= BlocoMore(Statements)
				| BlocoOne(Statement)
	Args		= Args1(Expr)
				| Args2(Expr Expr*)
	Expr		= Expr(OrExpr)
	OrExpr		= OrExpr1(AndExpr)
				| OrExpr2(AndExpr OrExprAux*)
	OrExprAux	= OrExprAux(OpOr AndExpr)
	AndExpr		= AndExpr1(EqualExpr)
				| AndExpr2(EqualExpr AndExprAux*)
	AndExprAux	= AndExprAux(OpAnd EqualExpr)
	EqualExpr	= AddExpr1(EqualExpr AddExpr)
				| AddExpr2(EqualExpr AddExpr EqualExprAux*)
	EqualExprAux= EqualExprAux(OpRel AddExpr)
	AddExpr		= AddExpr1(MultExpr)
				| AddExpr2(MultExpr AddExprAux*)
	AddExprAux	= AddExprAux(OpAdd MultExpr)
	MultExpr	= MultExpr1(NotExpr)
				| MultExpr2(NotExpr MultExprAux*)
	MultExprAux = MultExprAux(NotExpr)
	NotExpr		= NotExpr(NegationExpr)
	NegationExpr= NegationExpr(Fator)
	Fator		= Fator1(ID:String)
				| Fator2(Constante)
				| Fator3(Invocacao)
	Constante	= ConstanteString(s:String)
				| ConstanteChar(c:char)
				| ConstanteInt(i:int)
				| ConstanteBool(b:bool)
